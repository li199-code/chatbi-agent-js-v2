import { AgentState, DimensionTask } from "./types.js";
import { BaseMessage } from "@langchain/core/messages";
type AgentStateType = typeof AgentState.State;
export declare function clarifyWithUser(state: AgentStateType): Promise<Partial<AgentStateType>>;
export declare function fetchAnalyzeData(state: AgentStateType): Promise<Partial<AgentStateType>>;
export declare function prepareDimensionAnalysis(state: AgentStateType): Promise<Partial<AgentStateType>>;
export declare function analyzeSingleDimension(state: AgentStateType): Promise<Partial<AgentStateType>>;
export declare function finalizeDimensionAnalysis(state: AgentStateType): Promise<Partial<AgentStateType>>;
export declare function shouldContinueAnalysis(state: AgentStateType): string;
export declare const deepResearcher: import("@langchain/langgraph").CompiledStateGraph<import("@langchain/langgraph").StateType<{
    messages: import("@langchain/langgraph").BinaryOperatorAggregate<BaseMessage[], BaseMessage[]>;
    normalized_questions: import("@langchain/langgraph").BinaryOperatorAggregate<string[], string[]>;
    chatbi_analyze_results: import("@langchain/langgraph").BinaryOperatorAggregate<import("./types.js").ChatbiAnalyzeResult[], import("./types.js").ChatbiAnalyzeResult[]>;
    research_brief: import("@langchain/langgraph").BinaryOperatorAggregate<string, string>;
    supervisor_messages: import("@langchain/langgraph").BinaryOperatorAggregate<BaseMessage[], BaseMessage[]>;
    notes: import("@langchain/langgraph").BinaryOperatorAggregate<any[], any[]>;
    final_report: import("@langchain/langgraph").BinaryOperatorAggregate<string, string>;
    raw_notes: import("@langchain/langgraph").BinaryOperatorAggregate<string[], string[]>;
    singleNormalizedQuestionAnalyzeResult: import("@langchain/langgraph").BinaryOperatorAggregate<import("./types.js").SingleNormalizedQuestionAnalyzeResult[], import("./types.js").SingleNormalizedQuestionAnalyzeResult[]>;
    dimensionTasks: import("@langchain/langgraph").BinaryOperatorAggregate<DimensionTask[], DimensionTask[]>;
    currentTaskIndex: import("@langchain/langgraph").BinaryOperatorAggregate<number, number>;
}>, import("@langchain/langgraph").UpdateType<{
    messages: import("@langchain/langgraph").BinaryOperatorAggregate<BaseMessage[], BaseMessage[]>;
    normalized_questions: import("@langchain/langgraph").BinaryOperatorAggregate<string[], string[]>;
    chatbi_analyze_results: import("@langchain/langgraph").BinaryOperatorAggregate<import("./types.js").ChatbiAnalyzeResult[], import("./types.js").ChatbiAnalyzeResult[]>;
    research_brief: import("@langchain/langgraph").BinaryOperatorAggregate<string, string>;
    supervisor_messages: import("@langchain/langgraph").BinaryOperatorAggregate<BaseMessage[], BaseMessage[]>;
    notes: import("@langchain/langgraph").BinaryOperatorAggregate<any[], any[]>;
    final_report: import("@langchain/langgraph").BinaryOperatorAggregate<string, string>;
    raw_notes: import("@langchain/langgraph").BinaryOperatorAggregate<string[], string[]>;
    singleNormalizedQuestionAnalyzeResult: import("@langchain/langgraph").BinaryOperatorAggregate<import("./types.js").SingleNormalizedQuestionAnalyzeResult[], import("./types.js").SingleNormalizedQuestionAnalyzeResult[]>;
    dimensionTasks: import("@langchain/langgraph").BinaryOperatorAggregate<DimensionTask[], DimensionTask[]>;
    currentTaskIndex: import("@langchain/langgraph").BinaryOperatorAggregate<number, number>;
}>, "analyze_single_dimension" | "finalize_dimension_analysis" | "__start__" | "clarify_with_user" | "fetch_analyze_data" | "prepare_dimension_analysis" | "final_report_generation", {
    messages: import("@langchain/langgraph").BinaryOperatorAggregate<BaseMessage[], BaseMessage[]>;
    normalized_questions: import("@langchain/langgraph").BinaryOperatorAggregate<string[], string[]>;
    chatbi_analyze_results: import("@langchain/langgraph").BinaryOperatorAggregate<import("./types.js").ChatbiAnalyzeResult[], import("./types.js").ChatbiAnalyzeResult[]>;
    research_brief: import("@langchain/langgraph").BinaryOperatorAggregate<string, string>;
    supervisor_messages: import("@langchain/langgraph").BinaryOperatorAggregate<BaseMessage[], BaseMessage[]>;
    notes: import("@langchain/langgraph").BinaryOperatorAggregate<any[], any[]>;
    final_report: import("@langchain/langgraph").BinaryOperatorAggregate<string, string>;
    raw_notes: import("@langchain/langgraph").BinaryOperatorAggregate<string[], string[]>;
    singleNormalizedQuestionAnalyzeResult: import("@langchain/langgraph").BinaryOperatorAggregate<import("./types.js").SingleNormalizedQuestionAnalyzeResult[], import("./types.js").SingleNormalizedQuestionAnalyzeResult[]>;
    dimensionTasks: import("@langchain/langgraph").BinaryOperatorAggregate<DimensionTask[], DimensionTask[]>;
    currentTaskIndex: import("@langchain/langgraph").BinaryOperatorAggregate<number, number>;
}, {
    messages: import("@langchain/langgraph").BinaryOperatorAggregate<BaseMessage[], BaseMessage[]>;
    normalized_questions: import("@langchain/langgraph").BinaryOperatorAggregate<string[], string[]>;
    chatbi_analyze_results: import("@langchain/langgraph").BinaryOperatorAggregate<import("./types.js").ChatbiAnalyzeResult[], import("./types.js").ChatbiAnalyzeResult[]>;
    research_brief: import("@langchain/langgraph").BinaryOperatorAggregate<string, string>;
    supervisor_messages: import("@langchain/langgraph").BinaryOperatorAggregate<BaseMessage[], BaseMessage[]>;
    notes: import("@langchain/langgraph").BinaryOperatorAggregate<any[], any[]>;
    final_report: import("@langchain/langgraph").BinaryOperatorAggregate<string, string>;
    raw_notes: import("@langchain/langgraph").BinaryOperatorAggregate<string[], string[]>;
    singleNormalizedQuestionAnalyzeResult: import("@langchain/langgraph").BinaryOperatorAggregate<import("./types.js").SingleNormalizedQuestionAnalyzeResult[], import("./types.js").SingleNormalizedQuestionAnalyzeResult[]>;
    dimensionTasks: import("@langchain/langgraph").BinaryOperatorAggregate<DimensionTask[], DimensionTask[]>;
    currentTaskIndex: import("@langchain/langgraph").BinaryOperatorAggregate<number, number>;
}, import("@langchain/langgraph").StateDefinition>;
export declare function runDeepResearcher(userInput: string): Promise<AgentStateType>;
export {};
